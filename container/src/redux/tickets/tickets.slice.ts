import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { createTicket as createTicketService } from './tickets.api';

export type Ticket = {
  id: number;
  name: string;
  priority: 'high' | 'medium' | 'low';
}

export interface TicketsGridState {
  fetching: boolean;
  list: Ticket[];
}

const initialState: TicketsGridState = {
  fetching: false,
  list: [
    {
      id: 1,
      name: 'John Brown',
      priority: 'low',
    },
    {
      id: 2,
      name: 'Jim Green',
      priority: 'medium',
    },
    {
      id: 3,
      name: 'Joe Black',
      priority: 'high',
    },
  ],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createTicketAsync = createAsyncThunk(
  'tickets/fetchCount',
  async (ticket: Ticket) => {
    const response = await createTicketService(ticket);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const ticketsSlice = createSlice({
  name: 'tickets',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    createTicket: (state, action: PayloadAction<Ticket>) => {
      state.list = [...state.list, action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createTicketAsync.pending, (state) => {
        state.fetching = true;
      })
      .addCase(createTicketAsync.fulfilled, (state, action) => {
        state.fetching = false;
        state.list = [...state.list, action.payload];
      });
  },
});

export const { createTicket } = ticketsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default ticketsSlice.reducer;
