import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { createUser as createUserService } from './users.api';

export type User = {
  id: number;
  name: string;
}

export interface UsersGridState {
  fetching: boolean;
  list: User[];
}

const initialState: UsersGridState = {
  fetching: false,
  list: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createUserAsync = createAsyncThunk(
  'users/createUserAsync',
  async (user: User) => {
    const response = await createUserService(user);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const usersSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    createUser: (state, action: PayloadAction<User>) => {
      state.list = [...state.list, action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.fetching = true;
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.fetching = false;
        state.list = [...state.list, action.payload];
      });
  },
});

export const { createUser } = usersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const usersCount = (state: RootState) => state.users.list.length;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default usersSlice.reducer;
